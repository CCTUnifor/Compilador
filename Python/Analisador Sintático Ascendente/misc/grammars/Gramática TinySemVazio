N = {Programa,decl-sequencia,declaracao,exp,comp-op,exp-simples,soma,termo,mult,fator}
Sigma = {;,if,then,else,end,repeat,until,:=,ide,read,write,<,=,+,-,*,/,(,),num}
S = {Programa}
P = {
    Programa -> declaracao ; declaracao | if exp then decl-sequencia end | repeat decl-sequencia until exp | ide := exp | read ide | write exp

    decl-sequencia -> declaracao ; declaracao | if exp then decl-sequencia end | repeat decl-sequencia until exp | ide := exp | read ide | write exp

    declaracao -> if exp then decl-sequencia end | repeat decl-sequencia until exp | ide := exp | read ide | write exp

    exp -> exp-simples comp-op exp-simples | termo soma termo | fator mult fator | ( exp ) | num | ide

    comp-op -> < | =

    exp-simples -> termo soma termo | fator mult fator | ( exp ) | num | ide

    soma -> + | -

    termo -> fator mult fator | ( exp ) | num | ide

    mult -> * | /

    fator -> ( exp ) | num | ide
}