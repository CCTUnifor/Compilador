N = {Programa,decl-sequencia,declaracao,exp,comp-op,exp-simples,soma,termo,mult,fator,fator',P,P',termo',exp',exp-simples',if-start,if-end,repeat-start,repeat-end,IDE,WRITE,READ,decl-sequencia',atrib}
Sigma = {;,if,then,else,end,repeat,until,:=,ide,read,write,<,=,+,-,*,/,(,),num}
S = {Programa}
P = {
    Programa -> declaracao decl-sequencia' | if-start if-end | repeat-start repeat-end | IDE atrib | READ IDE | WRITE exp

    decl-sequencia -> declaracao decl-sequencia' | if-start if-end | repeat-start repeat-end | IDE atrib | READ IDE | WRITE exp

    decl-sequencia'-> ; declaracao

    declaracao -> if-start if-end | repeat-start repeat-end | IDE atrib | READ IDE | WRITE exp

    READ -> read

    WRITE -> write

    atrib -> := exp

    IDE -> ide

    repeat-start -> repeat decl-sequencia

    repeat-end -> until exp

    if-start-> if exp then

    if-end -> decl-sequencia end

    exp -> exp' exp-simples | exp-simples' termo | termo' fator | fator' P' | num | ide

    exp'-> exp-simples comp-op

    comp-op -> < | =

    exp-simples -> exp-simples' termo | termo' fator | fator' P' | num | ide

    exp-simples'-> termo soma

    soma -> + | -

    termo -> termo' fator | fator' P' | num | ide

    termo'-> fator mult

    mult -> * | /

    fator ->  fator' P' | num | ide

    fator'-> P exp

    P -> (

    P' -> )
}