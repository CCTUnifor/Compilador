Programa → decl-sequencia

decl-sequencia -> declaracao decl-sequencia' | declaracao
decl-sequencia'-> ;declaracao decl-sequencia'| ;declaracao

(eliminar a regra da cadeia) declaracao → cond-decl | repet-decl | atrib-decl | leit-decl | escr-decl 

(resolver a ambiguidade) cond-decl -> if exp then decl-sequencia end | if exp then decl-sequencia else decl-sequencia end 

repet-decl → repeat decl-sequencia until exp

atrib-decl → identificador := exp

leit-decl → read identificador

escr-decl → write exp

exp → exp-simples comp-op exp-simples | exp-simples

comp-op → < | =

exp-simples -> termo exp-simples' | termo
exp-simples'-> soma termo exp-simples' | soma termo

soma → + | -

termo -> fator termo' | fator
termo'-> mult fator termo' | mult fator

mult → + | /

fator → (exp) | numero | identificador