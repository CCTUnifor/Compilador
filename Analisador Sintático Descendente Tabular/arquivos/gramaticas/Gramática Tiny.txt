N = {Programa,decl-sequencia,decl-sequencia',declaracao,cond-decl,repet-decl,atrib-decl,leit-decl,escr-decl,exp,comp-op,exp-simples,exp-simples',soma,termo,termo',mult,fator}
Alf = {;,if,then,else,end,repeat,until,:=,identificador,read,write,<,=,+,-,*,/,(,),numero}
S = {Programa}
P = {
    Programa -> decl-sequencia

    decl-sequencia -> declaracao decl-sequencia' | declaracao
    decl-sequencia'-> ; declaracao decl-sequencia'| ; declaracao

    declaracao -> cond-decl | repet-decl | atrib-decl | leit-decl | escr-decl 

    cond-decl -> if exp then decl-sequencia end | if exp then decl-sequencia else decl-sequencia end

    repet-decl -> repeat decl-sequencia until exp

    atrib-decl -> identificador := exp

    leit-decl -> read identificador

    escr-decl -> write exp

    exp -> exp-simples comp-op exp-simples | exp-simples

    comp-op -> < | =

    exp-simples -> termo exp-simples' | termo
    exp-simples'-> soma termo exp-simples' | soma termo

    soma -> + | -

    termo -> fator termo' | fator
    termo'-> mult fator termo' | mult fator

    mult -> * | /

    fator -> ( exp ) | numero | identificador
}